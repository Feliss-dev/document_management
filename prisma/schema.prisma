// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum VaiTro {
    QUANTRIVIEN
    THANHTRA
    QUANLY
    NHANVIEN
}

enum PhamVi {
    CONGKHAI
    NOIBO
}

model NguoiDung {
    ma          String   @id @default(uuid())
    maDonVi     Int?
    vaiTro      VaiTro   @default(NHANVIEN)
    hoTen       String
    email       String
    matKhau     String
    trangThai   Boolean  @default(false)
    anhDaiDien  String?
    ngayTao     DateTime @default(now())
    ngayCapNhat DateTime @updatedAt

    donVi DonVi? @relation(fields: [maDonVi], references: [ma], onUpdate: Cascade)

    @@unique([email])
    @@index([email]) // Thêm chỉ mục cho trường email
    @@index([maDonVi]) // Thêm chỉ mục cho trường maDonVi
}

model DonVi {
    ma        Int         @id @default(autoincrement())
    tenDonVi  String
    moTa      String?
    nguoiDung NguoiDung[]
    taiLieu   TaiLieu[]

    @@index([ma])
    @@index([tenDonVi]) // Thêm chỉ mục cho trường tenDonVi
}

model CapBanHanh {
    ma      Int       @id @default(autoincrement())
    tenCap  String
    moTa    String?
    taiLieu TaiLieu[]

    @@index([tenCap]) // Thêm chỉ mục cho trường tenCap
}

model LinhVuc {
    ma         Int         @id @default(autoincrement())
    maLinhVuc  String      @unique
    tenLinhVuc String
    moTa       String?
    tieuChuan  TieuChuan[]
    taiLieu    TaiLieu[]

    @@index([maLinhVuc]) // Thêm chỉ mục cho trường maLinhVuc
}

model ChuongTrinhDaoTao {
    ma         Int         @id @default(autoincrement())
    maCTDT     String      @unique
    tenCTDT    String
    moTa       String?
    namDanhGia Int
    ngayTao    DateTime    @default(now())
    tieuChuan  TieuChuan[]

    @@index([maCTDT]) // Thêm chỉ mục cho trường maCTDT
}

model TieuChuan {
    ma                Int                @id @default(autoincrement())
    maTieuChuan       String             @unique
    maLinhVuc         Int
    tenTieuChuan      String
    moTa              String?
    namDanhGia        Int
    ngayTao           DateTime           @default(now())
    linhVuc           LinhVuc            @relation(fields: [maLinhVuc], references: [ma], onUpdate: Cascade)
    tieuChi           TieuChi[]
    ChuongTrinhDaoTao ChuongTrinhDaoTao? @relation(fields: [maCTDT], references: [ma], onUpdate: Cascade)
    maCTDT            Int

    @@index([maCTDT]) // Thêm chỉ mục cho trường idCTDT
    @@index([maLinhVuc]) // Thêm chỉ mục cho trường maLinhVuc
}

model TieuChi {
    ma          Int         @id @default(autoincrement())
    maTieuChi   String      @unique
    maTieuChuan Int
    tenTieuChi  String
    moTa        String?
    namDanhGia  Int
    ngayTao     DateTime    @default(now())
    tieuChuan   TieuChuan   @relation(fields: [maTieuChuan], references: [ma], onUpdate: Cascade)
    minhChung   MinhChung[]

    @@index([maTieuChuan]) // Thêm chỉ mục cho trường maTieuChuan
}

model MinhChung {
    ma           Int       @id @default(autoincrement())
    maMinhChung  String    @unique
    maTieuChi    Int
    tenMinhChung String
    moTa         String?
    ngayTao      DateTime  @default(now())

    tieuChi      TieuChi   @relation(fields: [maTieuChi], references: [ma], onUpdate: Cascade)
    taiLieu      TaiLieuMinhChung[]

    @@index([maTieuChi])
}

model LoaiVanBan {
    ma      Int       @id @default(autoincrement())
    tenLoaiVanBan String
    moTa    String?
    taiLieu TaiLieu[]

    @@index([ma]) // Thêm chỉ mục cho trường maLoaiVanBan
}

model TaiLieuMinhChung {
    maTaiLieu   Int
    maMinhChung Int

    taiLieu     TaiLieu   @relation(fields: [maTaiLieu], references: [ma], onDelete: Cascade)
    minhChung   MinhChung @relation(fields: [maMinhChung], references: [ma], onDelete: Cascade)

    @@id([maTaiLieu, maMinhChung]) // Khóa chính kết hợp
    @@index([maTaiLieu])
    @@index([maMinhChung])
}

model TaiLieu {
    ma           Int      @id @default(autoincrement())
    maDonVi      Int
    maLinhVuc    Int
    maCapBanHanh Int
    maLoaiVanBan Int
    soVanBan     String   @unique
    tenTaiLieu   String
    trichYeu     String?
    moTa         String?
    phamVi       PhamVi   @default(NOIBO)
    ngayBanHanh  DateTime
    ngayTao      DateTime @default(now())
    ngayCapNhat  DateTime @updatedAt

    
    donVi      DonVi      @relation(fields: [maDonVi], references: [ma], onUpdate: Cascade)
    linhVuc    LinhVuc    @relation(fields: [maLinhVuc], references: [ma], onUpdate: Cascade)
    capBanHanh CapBanHanh @relation(fields: [maCapBanHanh], references: [ma], onUpdate: Cascade)
    loaiVanBan LoaiVanBan @relation(fields: [maLoaiVanBan], references: [ma], onUpdate: Cascade)
    file       File[]     
    minhChung  TaiLieuMinhChung[]// Mối quan hệ n-n với bảng MinhChung

    @@index([ma]) // Thêm chỉ mục cho trường mâTàiLiệu
    @@index([soVanBan])
    @@index([maDonVi])
    @@index([maCapBanHanh])
    @@index([maLoaiVanBan])
    @@index([maLinhVuc])
}

model File {
    ma          Int      @id @default(autoincrement())
    maTaiLieu   String
    filePDF     String?
    fileGoc     String?
    ngayTao     DateTime @default(now())
    ngayCapNhat DateTime @updatedAt

    taiLieu TaiLieu @relation(fields: [maTaiLieu], references: [soVanBan], onDelete: Cascade, onUpdate: Cascade)

    @@index([maTaiLieu]) // Thêm chỉ mục cho trường maTaiLieu
}



// Enum for user roles
enum RoleType {
    ROOT
    INSPECTOR
    ADMIN
    STAFF
    GUEST
}

// Users model
model Users {
    id           String      @id @default(uuid())
    userId       String      @unique
    name         String
    imageUrl     String? // Optional field for user image
    email        String      @unique
    department   Department? @relation(fields: [departmentId], references: [departmentCode], onDelete: Cascade)
    departmentId String?
    role         RoleType
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    @@index([departmentId])
}

// Department model
model Department {
    id             Int             @id @default(autoincrement())
    departmentCode String          @unique
    departmentName String
    describe       String?
    users          Users[]
    documents      Document[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    ProofDocument  ProofDocument[]
}

// Documents model
model Document {
    id             String          @id @default(uuid())
    textNumber     String          @unique
    textName       String          @db.Text
    textType       TextType?       @relation(fields: [textTypeId], references: [name], onDelete: Cascade)
    textTypeId     String?
    releaseLevel   ReleaseLevel?   @relation(fields: [releaseLevelId], references: [name], onDelete: Cascade)
    releaseLevelId String?
    field          Field?          @relation(fields: [fieldId], references: [name], onDelete: Cascade)
    fieldId        String?
    releaseDate    DateTime
    updateUnit     Department?     @relation(fields: [updateUnitId], references: [departmentCode], onDelete: Cascade)
    updateUnitId   String?
    scope          Boolean         @default(false)
    describe       String?
    documentFiles  DocumentFile[]
    proofDocuments ProofDocument[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt

    @@index([textNumber])
    @@index([textTypeId])
    @@index([releaseLevelId])
    @@index([fieldId])
    @@index([updateUnitId])
}

// DocumentFile model
model DocumentFile {
    id           String   @id @default(uuid())
    document     Document @relation(fields: [documentId], references: [textNumber])
    documentId   String
    pdfFile      String?
    originalFile String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([documentId])
}

// ProofDocuments model
model ProofDocument {
    id             Int                 @id @default(autoincrement())
    textNumber     String              @unique
    textName       String
    textType       TextType            @relation(fields: [textTypeId], references: [id])
    textTypeId     Int
    releaseLevel   ReleaseLevel        @relation(fields: [releaseLevelId], references: [id])
    releaseLevelId Int
    field          Field               @relation(fields: [fieldId], references: [id])
    fieldId        Int
    releaseDate    DateTime
    updateUnit     Department?         @relation(fields: [updateUnitId], references: [id])
    updateUnitId   Int?
    scope          Boolean
    describe       String?
    proofFiles     ProofDocumentFile[]
    createdAt      DateTime            @default(now())
    updatedAt      DateTime            @updatedAt
    Document       Document?           @relation(fields: [documentId], references: [id])
    documentId     String?

    @@index([textNumber])
    @@index([textTypeId])
    @@index([releaseLevelId])
    @@index([fieldId])
    @@index([updateUnitId])
    @@index([documentId])
}

// ProofDocumentFile model
model ProofDocumentFile {
    id           Int           @id @default(autoincrement())
    document     ProofDocument @relation(fields: [documentId], references: [textNumber])
    documentId   String
    pdfFile      String?
    originalFile String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@index([documentId])
}

// Field lookup model
model Field {
    id             Int             @id @default(autoincrement())
    name           String          @unique
    describe       String?
    documents      Document[]
    proofDocuments ProofDocument[]
}

// TextType lookup model
model TextType {
    id             Int             @id @default(autoincrement())
    name           String          @unique
    describe       String?
    documents      Document[]
    proofDocuments ProofDocument[]
}

// ReleaseLevel lookup model
model ReleaseLevel {
    id             Int             @id @default(autoincrement())
    name           String          @unique
    describe       String?
    documents      Document[]
    proofDocuments ProofDocument[]
}
